# This file contains additional functions needed to expand isl's cmake variables

def llvm_target_cmake_vars(native_arch, target_triple):
    return {
        "LLVM_HOST_TRIPLE": target_triple,
        "LLVM_DEFAULT_TARGET_TRIPLE": target_triple,
        "LLVM_NATIVE_ARCH": native_arch,
    }

def expand_isl_cmake_vars(name, src, dst, cmake_vars):
  """Expands #cmakedefine, #cmakedefine01, and CMake variables in a text file.

  Args:
    name: the name of the rule
    src: the input of the rule
    dst: the output of the rule
    cmake_vars: a string containing the CMake variables, as generated by
      cmake_var_string.
  """
  expand_isl_cmake_vars_tool = "@//third_party/pet:expand_isl_cmake_vars"
  native.genrule(
      name = name,
      srcs = [src],
      tools = [expand_isl_cmake_vars_tool],
      outs = [dst],
      cmd = ("$(location {}) ".format(expand_isl_cmake_vars_tool) + cmake_vars +
             "< $< > $@")
  )

def _quote(s):
    """Quotes the given string for use in a shell command.

    This function double-quotes the given string (in case it contains spaces or
    other special characters) and escapes any special characters (dollar signs,
    double-quotes, and backslashes) that may be present.

    Args:
      s: The string to quote.

    Returns:
      An escaped and quoted version of the string that can be passed to a shell
      command.
    """
    return ('"' +
            s.replace("\\", "\\\\").replace("$", "\\$").replace('"', '\\"') +
            '"')

def cmake_var_string(cmake_vars):
  """Converts a dictionary to an input suitable for expand_cmake_vars.

  Ideally we would jist stringify in the expand_cmake_vars() rule, but select()
  interacts badly with genrules.

  TODO(phawkins): replace the genrule() with native rule and delete this rule.

  Args:
    cmake_vars: a dictionary with string keys and values that are convertable to
      strings.
  """
  return " ".join([_quote("{}={}".format(k, str(v)))
                   for (k, v) in cmake_vars.items()])


# The set of all CMake variables common to ISL targets
isl_cmake_vars = {
    # Headers
    "HAVE_DIRENT_H": 1,
    "HAVE_DLFCN_H": 1,
    "HAVE_ERRNO_H": 1,
    "HAVE_EXECINFO_H": 1,
    "HAVE_FCNTL_H": 1,
    "HAVE_INTTYPES_H": 1,
    "HAVE_PTHREAD_H": 1,
    "HAVE_SIGNAL_H": 1,
    "HAVE_STDINT_H": 1,
    "HAVE_SYS_IOCTL_H": 1,
    "HAVE_SYS_MMAN_H": 1,
    "HAVE_SYS_PARAM_H": 1,
    "HAVE_SYS_RESOURCE_H": 1,
    "HAVE_SYS_STAT_H": 1,
    "HAVE_SYS_TIME_H": 1,
    "HAVE_SYS_TYPES_H": 1,
    "HAVE_TERMIOS_H": 1,
    "HAVE_UNISTD_H": 1,
    "HAVE_ZLIB_H": 1,

    # Features
    "HAVE_BACKTRACE": 1,
    "HAVE_DLOPEN": 1,
    "HAVE_FUTIMES": 1,
    "HAVE_GETCWD": 1,
    "HAVE_GETPAGESIZE": 1,
    "HAVE_GETRLIMIT": 1,
    "HAVE_GETRUSAGE": 1,
    "HAVE_GETTIMEOFDAY": 1,
    "HAVE_INT64_T": 1,
    "HAVE_ISATTY": 1,
    "HAVE_LIBEDIT": 1,
    "HAVE_LIBPTHREAD": 1,
    "HAVE_LIBZ": 1,
    "HAVE_MKDTEMP": 1,
    "HAVE_MKSTEMP": 1,
    "HAVE_MKTEMP": 1,
    "HAVE_PREAD": 1,
    "HAVE_PTHREAD_GETSPECIFIC": 1,
    "HAVE_PTHREAD_MUTEX_LOCK": 1,
    "HAVE_PTHREAD_RWLOCK_INIT": 1,
    "HAVE_REALPATH": 1,
    "HAVE_SBRK": 1,
    "HAVE_SETENV": 1,
    "HAVE_SETRLIMIT": 1,
    "HAVE_SIGALTSTACK": 1,
    "HAVE_STRERROR": 1,
    "HAVE_STRERROR_R": 1,
    "HAVE_STRTOLL": 1,
    "HAVE_SYSCONF": 1,
    "HAVE_UINT64_T": 1,
    "HAVE__UNWIND_BACKTRACE": 1,

    # ISL
    # Defined.
    "USE_IMATH_FOR_MP": 1,
    "USE_SMALL_INT_OPT": 0,
    "GCC_WARN_UNUSED_RESULT": "__attribute__((__warn_unused_result__))",
    "HAVE_DECL_FFS": 1,
    "HAVE_DECL_SNPRINTF": 1,
    "HAVE_DECL___BUILTIN_FFS": 1,
    "HAVE_DECL_STRCASECMP": 1,
    "HAVE_DECL_STRNCASECMP": 1,
 #   "HAVE_DLFCN_H": 1,
 #   "HAVE_INTTYPES_H": 1,
    "HAVE_MEMORY_H": 1,
    "HAVE_STDLIB_H": 1,
    "HAVE_STRINGS_H": 1,
    "HAVE_STRING_H": 1,
    "HAVE___ATTRIBUTE__": 1,
    "LT_OBJDIR": ".libs/",
    "PACKAGE": "isl",
    "PACKAGE_BUGREPORT": "isl-development@googlegroups.com",
    "PACKAGE_NAME": "isl",
    "PACKAGE_STRING": "isl tensorflow-trunk",
    "PACKAGE_VERSION": "tensorflow-trunk",
    "PACKAGE_TARNAME": "tensorflow",
    "STDC_HEADERS": 1,
    "ISL_SOURCE_DIR": ".",

    # NOT defined.
    "HAVE_DECL__BITSCANFORWARD": 0,
    "HAVE_DECL__SNPRINTF": 0,
    "HAVE_DECL__STRICMP": 0,
    "HAVE_DECL__STRNICMP": 0,

    # LLVM features
    "ENABLE_BACKTRACES": 1,
    "LLVM_BINDIR": "/dev/null",
    "LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING": 0,
    "LLVM_ENABLE_ABI_BREAKING_CHECKS": 0,
    "LLVM_ENABLE_THREADS": 1,
    "LLVM_ENABLE_ZLIB": 1,
    "LLVM_HAS_ATOMICS": 1,
    "LLVM_INCLUDEDIR": "/dev/null",
    "LLVM_INFODIR": "/dev/null",
    "LLVM_MANDIR": "/dev/null",
    "LLVM_NATIVE_TARGET": 1,
    "LLVM_NATIVE_TARGETINFO": 1,
    "LLVM_NATIVE_TARGETMC": 1,
    "LLVM_NATIVE_ASMPRINTER": 1,
    "LLVM_NATIVE_ASMPARSER": 1,
    "LLVM_NATIVE_DISASSEMBLER": 1,
    "LLVM_ON_UNIX": 1,
    "LLVM_PREFIX": "/dev/null",
    "LLVM_VERSION_MAJOR": 0,
    "LLVM_VERSION_MINOR": 0,
    "LLVM_VERSION_PATCH": 0,
    "LTDL_SHLIB_EXT": ".so",
    "RETSIGTYPE": "void",
}

# CMake variables specific to the Darwin (Mac OS X) platform.
darwin_cmake_vars = {
    "HAVE_MALLOC_MALLOC_H": 1,
}

# CMake variables specific to the Linux platform
linux_cmake_vars = {
    "HAVE_MALLOC_H": 1,
    "HAVE_LINK_H": 1,
    "HAVE_MALLINFO": 1,
    "HAVE_FUTIMENS": 1,
}

isl_all_cmake_vars = select({
    "@//tensorflow:darwin": cmake_var_string(
        isl_cmake_vars + llvm_target_cmake_vars("X86", "x86_64-apple-darwin") +
        darwin_cmake_vars,
    ),
    "//conditions:default": cmake_var_string(
        isl_cmake_vars +
        llvm_target_cmake_vars("X86", "x86_64-unknown-linux_gnu") +
        linux_cmake_vars,
    ),
})




